# NOTES
# 'bind-key' binds a key to a command; the PREFIX key is required to be triggered first
# 'bind-key -n' binds a key without needing the PREFIX to be triggered
# 'bind-key -r' allows the bound key to be pressed repeatedly within the 'repeat-time' limit (default is 500ms)
# 'bind-key -T key-table' binds a key to the provided key-table, e.g. `bind-key -T copy-mode-vi ...`
#   will bind a key for use when in vi copy mode.
#   The default key-table is prefix, i.e. you don't need to pass `-T`
# 'unbind-key' removes a key binding

# for making this config compatible across different versions of tmux, see the following Stack Overflow Q/A:
# https://superuser.com/questions/1069902/tmux-configuration-stanzas-based-on-tmux-version

#############################
# meta
#############################

# change prefix to ` (backtick), and use C-o as a backup
set-option -g prefix `
set-option -g prefix2 C-o
bind-key ` send-prefix

# terminal
# set-window-option -g xterm-keys on
set-option -g default-terminal screen-256color

# mouse support
set-option -g mouse on

# The `WheelUpPane` "key" is a `WheelUp` mouse event that occurs over a pane (as opposed to over a border or the status line)
# `#{mouse_any_flag}` checks whether the underlying application accepts/wants mouse events
# `send-keys -M` means send the mouse event through
# `#{pane_in_mode}` checks whether the current pane is in a mode, e.g. copy-mode-vi or copy-mode-emacs
# `copy-mode -e` enters copy mode, but specifies that scrolling to the bottom of the history should exit copy mode

# if the underlying application accepts mouse events
# then pass the mouse event on through to the application
# else if the pane is in a mode (e.g. copy-mode-vi)
# then pass the mouse event into the mode (i.e. if we're already in copy mode, just keep scrolling)
# else enter copy mode where scrolling to the bottom exits copy mode
bind-key -n WheelUpPane if-shell -F -t = "#{mouse_any_flag}" "send-keys -M" "if-shell -F -t = '#{pane_in_mode}' 'send-keys -M' 'copy-mode -e'"

# clock
set-window-option -g clock-mode-style 24
set-window-option -g clock-mode-colour green

# other stuff
set-option -g base-index 1
set-option -g pane-base-index 1
set-option -g display-panes-time 1500
set-option -g history-limit 100000
set-option -g monitor-activity off
set-option -g visual-activity on
set-option -s escape-time 0

# terminal emulator window titles
set-option -g set-titles on
set-option -g set-titles-string '#S:#I.#P #W'

#############################
# status bar
#############################
set-option -g status-style "bg=black,fg=cyan"
set-option -g status-left-length 24

set-window-option -g window-status-current-style "fg=white"

#############################
# copy mode
#############################

set-window-option -g mode-keys vi

# before v2.4:
#   key table is 'vi-copy' (and the flag is '-t', not '-T')
#   the mapped command should just be 'begin-selection', i.e. 'send-keys -X' is unnecessary
unbind-key -T copy-mode-vi v
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind-key -T copy-mode-vi y send-keys -X copy-selection

#############################
# window management
#############################

# also mapped to `l` by default
bind-key C-a last-window

# also mapped to `p` by default
bind-key C-p previous-window

# also mapped to `n` by default
bind-key C-n next-window

bind-key C-o rotate-window
bind-key C-s set-window-option synchronize-panes

# alignment
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

#############################
# pane management
#############################

# highlight active pane on screen
set-option -g pane-active-border-style "fg=colour32"

# more straightforward keybindings for splitting
bind-key - split-window -v
bind-key | split-window -h
bind-key \ split-window -h
bind-key / split-window -h

# smart pane switching with awareness of vim/emacs pane splits
bind-key -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$|emacs.*$' && tmux send-keys C-h) || tmux select-pane -L"
bind-key -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$|emacs.*$' && tmux send-keys C-j) || tmux select-pane -D"
bind-key -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$|emacs.*$' && tmux send-keys C-k) || tmux select-pane -K"
bind-key -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iqE '(^|\/)vim(diff)?$|emacs.*$' && tmux send-keys C-l) || tmux select-pane -R"

#############################
# other key binding
#############################

# allows you to pass `C-l` to the application, as opposed to switching to the pane to the right; e.g. to clear the screen in your shell
bind-key C-l send-keys 'C-l'

# new ssh session
bind-key S command-prompt -p ssh: "new-window -n %1 'ssh %1'"
